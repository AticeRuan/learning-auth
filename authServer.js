require('dotenv').config()
const express=require('express');
const bcrypt=require('bcrypt');
const jwt=require('jsonwebtoken');
const app=express()
// use express.json() to parse the incoming request with JSON payloads
app.use(express.json())


function generateAccessToken(user){
    return jwt.sign(user, process.env.ACCESS_TOKEN_SECRET,{expiresIn:'15s'})
}

let refreshTokens=[]
const users=[]


app.post('/create-user', async (req,res)=>{
    try{
        // const salt=await bcrypt.genSalt() 
        // salt can be generated by bcrypt.genSalt() function, the second argument is the number of rounds to generate the salt, the higher the number the more secure the salt is, the default is 10
        const hashedPassword=await bcrypt.hash(req.body.password,10)
        const user={name:req.body.name,password:hashedPassword}
        users.push(user)
        res.status(201).send()
    }
    catch{
        res.status(500).send()
    }})


app.post('/login',async (req,res)=>{
    //Authenticate User
    const user=users.find(user=>user.name===req.body.name)
    if(user==null){
        return res.status(400).send('Cannot find user')
    }
    try{
        if(await bcrypt.compare(req.body.password,user.password)){
           
            //Generate Access Token    
    const accessToken=generateAccessToken(user)
    const refreshToken=jwt.sign(user,process.env.REFRESH_TOKEN_SECRET)
    refreshTokens.push(refreshToken)
    res.json({accessToken:accessToken,refreshToken:refreshToken})
    console.log(refreshTokens)

            res.send('Success')
        }
        else{
            res.send('Not Allowed')
        }
    }
    catch{
        res.status(500).send()
    }

//Generate Access Token    
    const accessToken=generateAccessToken(user)
    const refreshToken=jwt.sign(user,process.env.REFRESH_TOKEN_SECRET)
    refreshTokens.push(refreshToken)
    res.json({accessToken:accessToken,refreshToken:refreshToken})
    console.log(refreshTokens)
})



app.post('/token',(req,res)=>{
    const refreshToken=req.body.token   
    if(refreshToken==null) return res.sendStatus(401)
    if(!refreshTokens.includes(refreshToken)) return res.sendStatus(403)
    jwt.verify(refreshToken,process.env.REFRESH_TOKEN_SECRET,(err,user)=>{
        if(err) return res.sendStatus(403)
        const accessToken=generateAccessToken({name:user.name})
        res.json({accessToken:accessToken})
    })
}   )

app.delete('/logout',(req,res)=>{
    refreshTokens=refreshTokens.filter(token=>token!==req.body.token)
    res.sendStatus(204)
    console.log(refreshTokens)
})



app.listen(4000)