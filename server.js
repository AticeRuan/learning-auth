require('dotenv').config()
const express=require('express');
const bcrypt=require('bcrypt');
const jwt=require('jsonwebtoken');
const app=express()
// use express.json() to parse the incoming request with JSON payloads
app.use(express.json())


const users=[]



app.get('/',(req,res)=>{
    res.json(users)
})

app.post('/users', async (req,res)=>{
    try{
        // const salt=await bcrypt.genSalt() 
        // salt can be generated by bcrypt.genSalt() function, the second argument is the number of rounds to generate the salt, the higher the number the more secure the salt is, the default is 10
        const hashedPassword=await bcrypt.hash(req.body.password,10)
        const user={name:req.body.name,password:hashedPassword}
        users.push(user)
        res.status(201).send()
    }
    catch{
        res.status(500).send()
    }

})

app.post('/users/login',async (req,res)=>{
    //find the user by name in the users array 
    const user=users.find(user=>user.name===req.body.name)
    if(user==null){
        return res.status(400).send('Cannot find user')
    }
    try{
        if(await bcrypt.compare(req.body.password,user.password)){
            res.send('Success')
        }
        else{
            res.send('Not Allowed')
        }
    }
    catch{
        res.status(500).send()
    }
})


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

const posts=
[
    {
        username:'Kyle',
        title:'Post 1'
    },
    {
        username:'Jim',
        title:'Post 2'
    }
]


app.get('/posts',authenticateToken,(req,res)=>{
    // respond with only the posts that belong to the user by filtering the posts array according to the username
    res.json(posts.filter(post=>post.username===req.user.name))
})





function authenticateToken(req,res,next){
    // get the token from the header
    const authHeader=req.headers['authorization']
    const token=authHeader && authHeader.split(' ')[1]
    if(token==null) return res.sendStatus(401)
    // verify the token
    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET,(err,user)=>{
        if(err) return res.sendStatus(403)
        // set the user in the request object
        req.user=user
        next()
    })
}


app.listen(3000)